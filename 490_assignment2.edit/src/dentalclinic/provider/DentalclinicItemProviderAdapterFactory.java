/**
 */
package dentalclinic.provider;

import dentalclinic.util.DentalclinicAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DentalclinicItemProviderAdapterFactory extends DentalclinicAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DentalclinicItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dentalclinic.Appointment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppointmentItemProvider appointmentItemProvider;

	/**
	 * This creates an adapter for a {@link dentalclinic.Appointment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppointmentAdapter() {
		if (appointmentItemProvider == null) {
			appointmentItemProvider = new AppointmentItemProvider(this);
		}

		return appointmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dentalclinic.Dentist} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DentistItemProvider dentistItemProvider;

	/**
	 * This creates an adapter for a {@link dentalclinic.Dentist}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDentistAdapter() {
		if (dentistItemProvider == null) {
			dentistItemProvider = new DentistItemProvider(this);
		}

		return dentistItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dentalclinic.Client} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClientItemProvider clientItemProvider;

	/**
	 * This creates an adapter for a {@link dentalclinic.Client}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClientAdapter() {
		if (clientItemProvider == null) {
			clientItemProvider = new ClientItemProvider(this);
		}

		return clientItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dentalclinic.PolishingGel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolishingGelItemProvider polishingGelItemProvider;

	/**
	 * This creates an adapter for a {@link dentalclinic.PolishingGel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolishingGelAdapter() {
		if (polishingGelItemProvider == null) {
			polishingGelItemProvider = new PolishingGelItemProvider(this);
		}

		return polishingGelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dentalclinic.Amalgam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AmalgamItemProvider amalgamItemProvider;

	/**
	 * This creates an adapter for a {@link dentalclinic.Amalgam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAmalgamAdapter() {
		if (amalgamItemProvider == null) {
			amalgamItemProvider = new AmalgamItemProvider(this);
		}

		return amalgamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dentalclinic.GoldCrown} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoldCrownItemProvider goldCrownItemProvider;

	/**
	 * This creates an adapter for a {@link dentalclinic.GoldCrown}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoldCrownAdapter() {
		if (goldCrownItemProvider == null) {
			goldCrownItemProvider = new GoldCrownItemProvider(this);
		}

		return goldCrownItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dentalclinic.Crown} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CrownItemProvider crownItemProvider;

	/**
	 * This creates an adapter for a {@link dentalclinic.Crown}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCrownAdapter() {
		if (crownItemProvider == null) {
			crownItemProvider = new CrownItemProvider(this);
		}

		return crownItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dentalclinic.Scaling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScalingItemProvider scalingItemProvider;

	/**
	 * This creates an adapter for a {@link dentalclinic.Scaling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScalingAdapter() {
		if (scalingItemProvider == null) {
			scalingItemProvider = new ScalingItemProvider(this);
		}

		return scalingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dentalclinic.Filling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FillingItemProvider fillingItemProvider;

	/**
	 * This creates an adapter for a {@link dentalclinic.Filling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFillingAdapter() {
		if (fillingItemProvider == null) {
			fillingItemProvider = new FillingItemProvider(this);
		}

		return fillingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dentalclinic.Checkup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CheckupItemProvider checkupItemProvider;

	/**
	 * This creates an adapter for a {@link dentalclinic.Checkup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCheckupAdapter() {
		if (checkupItemProvider == null) {
			checkupItemProvider = new CheckupItemProvider(this);
		}

		return checkupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dentalclinic.MinorSurgery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinorSurgeryItemProvider minorSurgeryItemProvider;

	/**
	 * This creates an adapter for a {@link dentalclinic.MinorSurgery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinorSurgeryAdapter() {
		if (minorSurgeryItemProvider == null) {
			minorSurgeryItemProvider = new MinorSurgeryItemProvider(this);
		}

		return minorSurgeryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (appointmentItemProvider != null) appointmentItemProvider.dispose();
		if (dentistItemProvider != null) dentistItemProvider.dispose();
		if (clientItemProvider != null) clientItemProvider.dispose();
		if (polishingGelItemProvider != null) polishingGelItemProvider.dispose();
		if (amalgamItemProvider != null) amalgamItemProvider.dispose();
		if (goldCrownItemProvider != null) goldCrownItemProvider.dispose();
		if (crownItemProvider != null) crownItemProvider.dispose();
		if (scalingItemProvider != null) scalingItemProvider.dispose();
		if (fillingItemProvider != null) fillingItemProvider.dispose();
		if (checkupItemProvider != null) checkupItemProvider.dispose();
		if (minorSurgeryItemProvider != null) minorSurgeryItemProvider.dispose();
	}

}
